[
  {
    "type": "tldr",
    "content": "Здесь показываем что умеет движок."
  },
  {
    "type": "markdown",
    "content": "## Тут секция с markdown\n\n Markdown text"
  },
  {
    "type": "markdown",
    "content": "## Тут секция с графами"
  },
  {
    "type": "markdown",
    "content": "#### Circle Graph"
  },
  {
    "type": "markdown",
    "content": "## Тут секция с чартами\n\n"
  },
  {
    "type": "markdown",
    "content": "#### Line Chart"
  },
  {"type": "chart",
    "content": {
      "type": "line",
      "color": "#1e4a76",
      "show_grid": true,
      "x-axis": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "y-axis": [
        4,
        5,
        0,
        3,
        0,
        1
      ]
    }
  },
  {
    "type": "markdown",
    "content": "#### Smooth Line Chart"
  },
  {"type": "chart",
    "content": {
      "type": "line",
      "color": "#1e4a76",
      "line_smooth": true,
      "show_grid": true,
      "x-axis": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "y-axis": [
        4,
        5,
        0,
        3,
        0,
        1
      ]
    }
  },
  {
    "type": "markdown",
    "content": "#### Scatter Chart"
  },
  {"type": "chart",
    "content": {
      "type": "scatter",
      "color": "#BF00B0",
      "x-axis": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "y-axis": [
        4,
        5,
        0,
        3,
        0,
        1
      ]
    }
  },
  {
    "type": "markdown",
    "content": "#### Bar Chart"
  },
  {"type": "chart",
    "content": {
      "type": "bar",
      "color": "#BF00B0",
      "x-axis": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "y-axis": [
        4,
        5,
        0,
        3,
        0,
        1
      ]
    }
  },
  {
    "type": "markdown",
    "content": "#### Pie Chart"
  },
  {"type": "chart",
    "content": {
      "type": "pie",
      "labels": [
        "Python",
        "C++",
        "Java",
        "Pascal"
      ],
      "ratio": [
        30,
        10,
        5,
        55
      ]
    }
  },
  {
    "type":"markdown",
    "content":"#Секция с шагами\nНиже приведен пример описания построения двоичной кучи:"
  },
  {
    "type":"steps",
    "content":[
      [
        {
          "type":"markdown",
          "content":"#Ициализация"
        },
        {
          "type":"markdown",
          "content":"Начать стоит с того, что добавить в дерево первый элемент, он будет являться корнем и уже образует упорядоченную кучу сам по себе."
        },
        {
          "type": "graph",
          "content": {
            "type": "dot",
            "node_color": "#D3D3D3",
            "edge_color": "#909090",
            "node_count": 7,
            "node_attributes": {
              "0": {"label":"12", "color":"yellow"}
            },
            "edges": [
              {"from": 0, "to":1},
              {"from": 0, "to":2},
              {"from": 1, "to":3},
              {"from": 1, "to":4},
              {"from": 2, "to":5},
              {"from": 2, "to":6}
            ]
          }
        }
      ],
      [
        {
          "type":"markdown",
          "content":"#Добавление элемента"
        },
        {
          "type":"markdown",
          "content":"Далее добавляем следующий элемент в первый незянятый слот в порядке BFS обхода."
        },
        {
          "type": "graph",
          "content": {
            "type": "dot",
            "node_color": "#D3D3D3",
            "edge_color": "#909090",
            "node_count": 7,
            "node_attributes": {
              "0": {"label":"12", "color":"yellow"},
              "1": {"label":"1", "color":"green"}
            },
            "edges": [
              {"from": 0, "to":1},
              {"from": 0, "to":2},
              {"from": 1, "to":3},
              {"from": 1, "to":4},
              {"from": 2, "to":5},
              {"from": 2, "to":6}
            ]
          }
        }
],
      [
        {
          "type":"markdown",
          "content":"#Восстановление упорядоченности"
        },
        {
          "type":"markdown",
          "content":"Чтобы восстановить упорядоченность кучи, <+поднимаем новый элемент наверх+>(Каким образом?){Меняем значениями с родителем}, пока он не станет меньше, чем все его предки."
        },
        {
          "type": "graph",
          "content": {
            "type": "dot",
            "node_color": "#D3D3D3",
            "edge_color": "#909090",
            "node_count": 7,
            "node_attributes": {
              "0": {"label":"1", "color":"green"},
              "1": {"label":"12", "color":"yellow"}
            },
            "edges": [
              {"from": 0, "to":1},
              {"from": 0, "to":2},
              {"from": 1, "to":3},
              {"from": 1, "to":4},
              {"from": 2, "to":5},
              {"from": 2, "to":6}
            ]
          }
        }

      ],
      [
        {
          "type":"markdown",
          "content":"Таким образом необходимо последовательно добавлять элементы и поднимать их наверх. В итоге получится упорядоченная куча с минимальным элементом в корнe."
        },
        {
          "type": "graph",
          "content": {
            "type": "dot",
            "node_color": "#D3D3D3",
            "edge_color": "#909090",
            "node_count": 7,
            "node_attributes": {
              "0": {"label":"1", "color":"yellow"},
              "1": {"label":"10", "color":"yellow"},
              "2": {"label":"5", "color":"yellow"},
              "3": {"label":"15", "color":"yellow"},
              "4": {"label":"107", "color":"yellow"},
              "5": {"label":"9", "color":"yellow"}
            },
            "edges": [
              {"from": 0, "to":1},
              {"from": 0, "to":2},
              {"from": 1, "to":3},
              {"from": 1, "to":4},
              {"from": 2, "to":5},
              {"from": 2, "to":6}
            ]
          }
        }


      ]
    ]
  }
]
